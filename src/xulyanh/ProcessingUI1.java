/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xulyanh;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author PhongNT
 */
public class ProcessingUI1 extends javax.swing.JFrame {

    /**
     * Creates new form SpatialEnhancement
     */
    private BufferedImage pictures = null;
     ProcessingUI2 i2 = null;

    private int[] histOri = null;
    private int[] histMin = null;
    private int[] histMax = null;
    private int[] histMedian = null;
    private int[] histWeightAverage = null;
    private int[] histAverage = null;
    static String mes = null;

    public ProcessingUI1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnOri = new javax.swing.JPanel();
        lblOri = new javax.swing.JLabel();
        pnMinFilter = new javax.swing.JPanel();
        lblMinFilter = new javax.swing.JLabel();
        pnMaxFilter = new javax.swing.JPanel();
        lblMaxFilter = new javax.swing.JLabel();
        pnMedianFilter = new javax.swing.JPanel();
        lblMedianFilter = new javax.swing.JLabel();
        pnAveragingFilter = new javax.swing.JPanel();
        lblAveragingFilter = new javax.swing.JLabel();
        pnWeightedAverFilter = new javax.swing.JPanel();
        lblWeightedFilter = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        iteOpen = new javax.swing.JMenuItem();
        iteHistogram = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Xử lý ảnh");
        setPreferredSize(new java.awt.Dimension(1200, 750));
        getContentPane().setLayout(new java.awt.GridLayout(2, 3));

        pnOri.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ảnh Gốc", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(51, 51, 255))); // NOI18N
        pnOri.setLayout(new java.awt.BorderLayout());
        pnOri.add(lblOri, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnOri);

        pnMinFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Min Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(51, 51, 255))); // NOI18N
        pnMinFilter.setLayout(new java.awt.BorderLayout());
        pnMinFilter.add(lblMinFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnMinFilter);

        pnMaxFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)), "Max Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        pnMaxFilter.setLayout(new java.awt.BorderLayout());
        pnMaxFilter.add(lblMaxFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnMaxFilter);

        pnMedianFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 204, 0)), "Median Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        pnMedianFilter.setLayout(new java.awt.BorderLayout());
        pnMedianFilter.add(lblMedianFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnMedianFilter);

        pnAveragingFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0)), "Averaging Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        pnAveragingFilter.setLayout(new java.awt.BorderLayout());
        pnAveragingFilter.add(lblAveragingFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnAveragingFilter);

        pnWeightedAverFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)), "Weighted Averaging Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 51, 255))); // NOI18N
        pnWeightedAverFilter.setLayout(new java.awt.BorderLayout());
        pnWeightedAverFilter.add(lblWeightedFilter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnWeightedAverFilter);

        jMenu1.setText("File");

        iteOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        iteOpen.setText("Open");
        iteOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iteOpenActionPerformed(evt);
            }
        });
        jMenu1.add(iteOpen);

        iteHistogram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        iteHistogram.setText("Histogram");
        iteHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iteHistogramActionPerformed(evt);
            }
        });
        jMenu1.add(iteHistogram);
        jMenu1.add(jSeparator1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void iteOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iteOpenActionPerformed
        // TODO add your handling code here:

        try {
            operators();
        } catch (IOException ex) {
            Logger.getLogger(ProcessingUI1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iteOpenActionPerformed

    private void iteHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iteHistogramActionPerformed
        // TODO add your handling code here:
         i2.showHistogram(histOri, histMin, histMax, histMedian, histAverage, histWeightAverage);
        i2.setVisible(true);
    }//GEN-LAST:event_iteHistogramActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // thực hiện chuyển đổi ảnh bằng năm thuật toán neighbourhood và tính toán Histogram 
    private void operators() throws IOException {
       
        i2 = new ProcessingUI2();
        // i2.dispose();
        pictures =  Processing.getPicture();
        //================================================================
        //ảnh gốc
        //scale ảnh cho vừa với panel.
        Image im = pictures.getScaledInstance(pnOri.getWidth(),
                pnOri.getHeight(), BufferedImage.SCALE_DEFAULT);
        // tính Histogram 
        histOri = Processing.histogram(pictures);

        // hiên ảnh lên
        lblOri.setIcon(new ImageIcon(im));

        //=====================================================================
        // min filter
        //scale ảnh cho vừa với panel.
        BufferedImage bi = Processing.minNeighbourhoodImage(pictures);
        Image im1 = bi.getScaledInstance(pnMinFilter.getWidth(),
                pnMinFilter.getHeight(), BufferedImage.SCALE_DEFAULT);
        // tính Histogram 
        histMin = Processing.histogram(bi);
        // hiên ảnh lên
        lblMinFilter.setIcon(new ImageIcon(im1));
        //===================================================================    
        // max filter
        //scale ảnh cho vừa với panel.
        BufferedImage bi1 = Processing.maxNeighbourhoodImage(pictures);
        Image im11 = bi1.getScaledInstance(pnMaxFilter.getWidth(),
                pnMaxFilter.getHeight(), BufferedImage.SCALE_DEFAULT);
         // tính Histogram 
        histMax = Processing.histogram(bi1);
        // hiên ảnh lên
        lblMaxFilter.setIcon(new ImageIcon(im11));

        //=================================================================
        // median filter
        //scale ảnh cho vừa với panel.
        BufferedImage bi2 = Processing.medianImage(pictures);
        Image im2 = bi2.getScaledInstance(pnMedianFilter.getWidth(),
                pnMedianFilter.getHeight(), BufferedImage.SCALE_DEFAULT);
         // tính Histogram 
        histMedian = Processing.histogram(bi2);
        // hiên ảnh lên
        lblMedianFilter.setIcon(new ImageIcon(im2));
        
          //=================================================================
        // averaging filter
        //scale ảnh cho vừa với panel.
        BufferedImage bi3 = Processing.averageImage(pictures);
        Image im3 = bi3.getScaledInstance(pnAveragingFilter.getWidth(),
                pnAveragingFilter.getHeight(), BufferedImage.SCALE_DEFAULT);
         // tính Histogram 
        histAverage = Processing.histogram(bi3);
        // hiên ảnh lên
        lblAveragingFilter.setIcon(new ImageIcon(im3));
        
         //=================================================================
        // averaging filter
        //scale ảnh cho vừa với panel.
        BufferedImage bi4 = Processing.weightAverageImage(pictures);
        Image im4 = bi4.getScaledInstance(pnWeightedAverFilter.getWidth(),
                pnWeightedAverFilter.getHeight(), BufferedImage.SCALE_DEFAULT);
         // tính Histogram 
        histWeightAverage = Processing.histogram(bi4);
        // hiên ảnh lên
        lblWeightedFilter.setIcon(new ImageIcon(im4));
        
         soSanhCacPhuongPhap(histMin, histMax, histMedian, histAverage, histWeightAverage);
    }

    
     public void soSanhCacPhuongPhap(int[] hist, int[] hist1, int[] hist2, int[] hist3, int[] hist4) {
        SoSanh min = new SoSanh(demTanXuat(hist), "Min Filter");
        SoSanh max = new SoSanh(demTanXuat(hist1), "Max Fileter");
        SoSanh median = new SoSanh(demTanXuat(hist2), "Median Filter");
        SoSanh averaging = new SoSanh(demTanXuat(hist3), "Averaging Filter ");
        SoSanh weightedAveraging = new SoSanh(demTanXuat(hist4), "Weighted Averaging");
        
        ArrayList<SoSanh> al = new ArrayList<>();
        al.add(min); al.add(max);al.add(median); al.add(averaging); al.add(weightedAveraging);
        Collections.sort(al, new Comparator<SoSanh>() {
            @Override
            public int compare(SoSanh o1, SoSanh o2) {
                if (o1.tanXuat > o2.tanXuat)
                    return 1;   
                else {
                    if (o1.tanXuat == o2.tanXuat)
                    {
                        return 0;
                    }else
                    {
                        return -1;
                    }
                }
            }
        });
        
        String message = "Độ cân bằng mức xám giảm dần theo thứ tự: \n";
        for (SoSanh soSanh : al) {
            message += "                   " + soSanh.ten  +" "+  soSanh.tanXuat + "\n";
        }
        
        mes = message;
        
    }
     
     
       // hàm dùng để đếm số mức xám có tần xuất xuất hiện = 0 trong histogram
    private int demTanXuat(int[] arr)
    {
        int dem = 0;
        for(int i = 0; i < arr.length ; i++)
        {
            if (arr[i]  == 0 )
            {
                dem ++;
            }
        }
        
        return dem;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcessingUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcessingUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcessingUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessingUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessingUI1().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem iteHistogram;
    private javax.swing.JMenuItem iteOpen;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblAveragingFilter;
    private javax.swing.JLabel lblMaxFilter;
    private javax.swing.JLabel lblMedianFilter;
    private javax.swing.JLabel lblMinFilter;
    private javax.swing.JLabel lblOri;
    private javax.swing.JLabel lblWeightedFilter;
    private javax.swing.JPanel pnAveragingFilter;
    private javax.swing.JPanel pnMaxFilter;
    private javax.swing.JPanel pnMedianFilter;
    private javax.swing.JPanel pnMinFilter;
    private javax.swing.JPanel pnOri;
    private javax.swing.JPanel pnWeightedAverFilter;
    // End of variables declaration//GEN-END:variables
}
